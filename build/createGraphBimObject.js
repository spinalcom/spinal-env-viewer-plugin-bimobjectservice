"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _spinalEnvViewerGraphService = require("spinal-env-viewer-graph-service");

var _spinalServiceAssemblyManager = require("spinal-service-assembly-manager");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const BIM_OBJECT_CONTEXT_TYPE = "BIMObjectContext";
const BIM_OBJECT_NODE_TYPE = "BIMObject";
const BIM_OBJECT_RELATION_NAME = "hasBIMObject";
const REFERENCE_OBJECT_RELATION_NAME = "hasReferenceObject";
const BIM_OBJECT_RELATION_TYPE = _spinalEnvViewerGraphService.SPINAL_RELATION_PTR_LST_TYPE;

const assemblyManger = _spinalServiceAssemblyManager.assemblyManagerService;
const bimObjectService = {

  getGraph() {
    return _spinalEnvViewerGraphService.SpinalGraphService.getGraph();
  },

  createBIMObject(dbid, name) {
    return assemblyManger.createBimObj(dbid, name, assemblyManger._getCurrentModel());
  },

  getBIMObject(dbid) {
    return assemblyManger.getBimObjectFromViewer(dbid, assemblyManger._getCurrentModel()).then(bimObj => {
      if (bimObj) {
        console.log('bimObj', bimObj);
        return _spinalEnvViewerGraphService.SpinalGraphService.getRealNode(bimObj.id);
      }
      return undefined;
    });
  },

  addBIMObject(context, parent, dbId, name) {
    return this.getBIMObject(dbId).then(bimObject => {
      if (bimObject) {
        return _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parent.info.id.get(), bimObject.info.id.get(), context.info.id.get(), BIM_OBJECT_RELATION_NAME, BIM_OBJECT_RELATION_TYPE);
      }
      return assemblyManger.createBimObj(dbId, name, assemblyManger._getCurrentModel()).then(bimObj => {
        console.log('create then', bimObj);
        return this.addBIMObject(context, parent, dbId, name);
      });
    }).catch(e => {
      console.error(e);
    });
  },

  removeBIMObject(parent, child) {
    _spinalEnvViewerGraphService.SpinalGraphService.removeChild(parent.info.id.get(), child.info.id.get(), BIM_OBJECT_RELATION_NAME, BIM_OBJECT_RELATION_TYPE);
  },

  deleteBIMObject(dbId) {
    return this.getBIMObject(dbId).then(BIMobj => {
      if (BIMobj) return _spinalEnvViewerGraphService.SpinalGraphService.removeFromGraph(BIMobj.info.id.get());
      // @ts-ignore
      throw Error("The dbId has no BIM object");
    });
  },

  addReferenceObject(parent, dbId, name) {
    var _this = this;

    return _asyncToGenerator(function* () {

      let node;

      if (dbId instanceof _spinalEnvViewerGraphService.SpinalNode) {
        node = dbId;
      } else {
        node = yield _this.getBIMObject(dbId);

        if (node === undefined) {

          node = yield _this.createBIMObject(dbId, name);
        }
      }

      _spinalEnvViewerGraphService.SpinalGraphService.addChild(parent.info.id.get(), node.info.id.get(), REFERENCE_OBJECT_RELATION_NAME, BIM_OBJECT_RELATION_TYPE);
      return node;
    })();
  },

  removeReferenceObject(parent, child) {
    return this.removeBIMObject(parent, child);
  }
};

bimObjectService.constants = {
  BIM_OBJECT_CONTEXT_TYPE,
  BIM_OBJECT_NODE_TYPE,
  BIM_OBJECT_RELATION_NAME,
  REFERENCE_OBJECT_RELATION_NAME,
  BIM_OBJECT_RELATION_TYPE
};

exports.default = bimObjectService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,